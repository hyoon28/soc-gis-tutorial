[["index.html", "Spatial Data and Mapping for Sociologists Chapter 1 About 1.1 Spatial Data and Analysis", " Spatial Data and Mapping for Sociologists Hesu Yoon Last updated: 2024-11-19 Chapter 1 About The social life is embedded in space. The advent of digital technology, once believed to jeopardize the significance of space, mediates and reconfigures how people experience and navigate places. From pandemic to climate change to globalizing gentrification and migration, there are abundant sociological inquiries that require the understanding of how social groups, institutions, and resources are spatially organized. This module is designed to equip students with tools that help them explore these topics. The following is a series of tutorials prepared for the Spatial Data and Mapping module from Methods in Quantitative Sociology at ENSAE Paris. This module specifically aims to teach students how to gather, process, and visualize spatial data for sociological research. Some prior experience or familiarity with quantitative data and R/R Studio is necessary to follow the tutorials. However, no prior experience in spatial data and/or software is assumed. Before the class, make sure you have R/R studio installed. You can download all the data used in the tutorials here. There is no textbook for this module. However, [Practical Handbook of Thematic Cartography] (https://www.google.fr/books/edition/Practical_Handbook_of_Thematic_Cartograp/g7fjDwAAQBAJ?hl=en&amp;gbpv=0) (Lambert and Zanin, 2020) is highly recommended. Each tutorial is a chapter in this website. You can navigate through the chapters using the sidebar. 1.1 Spatial Data and Analysis Spatial data refers to data representing features or objects on the Earth’s surface. Whether it’s man-made or natural, if it has to do with a specific location on the surface of the Earth, it is spatial. Spatial data is typically classified into two types: Vector data and raster data. Vector data represents geographic data symbolized as points, lines, or polygons. Raster data represents geographic data as a matrix of cells that each contains an attribute value. In this series of tutorials, we focus on the vector data type. Representing Real World Through Spatial Data There are three forms of vector data. Points: A single dot, expressed as a coordinate (e.g., landmarks). Lines: A line defined by two coordinates, with a definite length (e.g., roads, rivers) Polygons: A closed shape is defined using three or more coordinates, representing areas (e.g., neighborhood boundaries). Types of Spatial Data. Source: Lambert and Zanin (2020) Spatial data contains more information than just a location on the surface of the Earth represented by vector data. Any additional information, or non-spatial data, that describes a feature is referred to as an attribute. Sociologists utilize a variety of non-spatial data, such as demographic and socioeconomic data linked to particular locales. ANALYTIC TOOLS Spatial data analytics involves collecting, processing, and analyzing various types of spatial data. The results are often descriptive, which involves summarizing and visualizing spatial data to identify patterns and relationships in geographic contexts. While there are multiple tools to carry out spatial analysis, we will use R in this tutorial. R provides sufficient spatial packages prepared for data manipulation, visualization, and analysis for social scientists. It can also be readily linked with more traditional statistical analysis. Last but not least, using R is helpful for open science and replication, which is increasingly important in social science research. Tools for Spatial Analysis. Source: CARTO) LEARN MORE Geomatics with R is a tutorial developed by RIATE (https://riate.cnrs.fr/riate.html). Specifically, it provides how to use terra package for handling raster data type. "],["emplacing-demographic-data.html", "Chapter 2 Emplacing Demographic Data 2.1 Defining boundaries 2.2 Joining attributes 2.3 Data visualization", " Chapter 2 Emplacing Demographic Data In this chapter, we will discuss demographic data nested in places, which is often used in sociological research. Sociologists often study where people live and move to. Topics like migration, segregation, gentrification, integration/assimilation, and diversity/fractionalization can be studied using aggregated demographic data for a given geographic unit. As a first step, defining a geographic unit and boundary suitable for your analysis is critical. 2.1 Defining boundaries Geographic boundaries can be defined and drawn at various levels, from regions to cities to neighborhoods. Territories are contested and (re)defined through social processes, therefore, it is important to clearly define and justify your choice of spatial boundary as a unit of analysis. Common topics studied by urban sociologists, for instance, often involves neighborhood dynamics. But what are neighborhoods? While government-defined census tracts are often used as a proxy for neighborhoods in quantitative social science research, some scholars choose to analyze other types of boundaries, such as “community areas” that are more meaningful to its residents. THE CASE OF SAN FRANCISCO Let’s demonstrate the importance of defining neighborhood boundaries using the case of San Francisco. San Francisco’s neighborhood names and boundaries have changed over time (1) and the current names and boundaries are often inconsistently perceived and administered (2). The image below, for example, compares the old and current neighborhood names and boundaries in San Francisco. Source: SFGATE In this tutorial, we will learn how to visualize San Francisco neighborhoods based on census tracts as well as the “Analysis Neighborhood” created by the city officials. Many US city governments provide their local data through Open Data websites, including San Francisco’s DataSF. Open their website and then click the “Geographic Locations &amp; Boundaries” tab. DataSF is an open data website provided by the city government of San Francisco Under this tab, you will find the 2010 census tract and “Analysis Neighborhood” boundaries, among many other geographic data. Geographic boundaries data can come in various formats, like geojson, shapefiles, etc. In this tutorial, we use geojson files. Geographic boundaries are “polygons” We use sf package in R to handle spatial data. Set up and import geojson files. # First, you will have to set up by installing and calling the sf package. library(sf) # Import neighborhood boundaries data (polygons) sfnh &lt;- st_read(&quot;data/sfnh.geojson&quot;) # for &quot;Analysis Neighborhood&quot; boundaries sftrt &lt;- st_read(&quot;data/sftrt_clean.geojson&quot;) # for census tracts You can treat sf objects like data frames. # Overview of variables head(sfnh, 3) ## Simple feature collection with 3 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4761 ymin: 37.70833 xmax: -122.3983 ymax: 37.79037 ## Geodetic CRS: WGS 84 ## nhood geometry ## 1 Western Addition MULTIPOLYGON (((-122.4214 3... ## 2 West of Twin Peaks MULTIPOLYGON (((-122.461 37... ## 3 Visitacion Valley MULTIPOLYGON (((-122.4039 3... # Transform an sf object into a simple one data frame (without geometries) sfnh_wo_geo &lt;- st_drop_geometry(sfnh) head(sfnh_wo_geo, 3) ## nhood ## 1 Western Addition ## 2 West of Twin Peaks ## 3 Visitacion Valley We can compare how San Francisco neighborhood boundaries differ by mapping them next to each other. We use ggplot for mapping. library(ggplot2) # Displaying geometry for &quot;analysis neighborhood&quot; boundaries sfnh_geo &lt;- ggplot(data = sfnh) + # add a layer to the plot using spatial data geom_sf(fill = &quot;grey&quot;, # set the fill color of the spatial features color = &quot;white&quot;, # set the color of boundaries size = 0.5) + # set the thickness of the boundary lines theme_void() # apply no background # Replicate the map using census tract boundaries sftrt_geo &lt;- ggplot(data = sftrt) + geom_sf(fill = &quot;grey&quot;, color = &quot;white&quot;, size = 0.5) + theme_void() # Combining maps ggpubr::ggarrange(sfnh_geo, sftrt_geo, ncol=2, labels = c(&quot;Analysis Neighborhood&quot;, &quot;2010 Census Tract&quot;) ) # Overlaying boundaries ggplot() + geom_sf(data = sftrt, fill = NA, color = &quot;blue&quot;, size = 0.2) + geom_sf(data = sfnh, fill = NA, color = &quot;red&quot;, size = 5) + theme_void() + labs(title = &quot;Compare Boundaries&quot;) What differences do you see between “Analysis Neighborhood” and “Census Tract”? THINK AND SHARE Let’s consider another example of contentious geographic unit: Europe. How will you define “Europe”? Should a map of Europe include Turkey, Ukraine, Lapland, or French Guyana? Where is the center of Europe? Source: Lambert and Zanin (2020) Think of various geographic levels of analysis. What questions could we ask about them? How will you define their boundaries? LEARN MORE New York Times Upshot report did a great job exploring New York City’s neighborhood boundaries using crowd-sourced data. They asked residents of New York City to demarcate neighborhood boundaries and identify their names. It provides a fascinating window to understand the sticky yet malleable nature of geographic boundaries. Documentation for Simple Features for R (sf package) 2.2 Joining attributes Geographic boundaries alone don’t tell us much about what is social about them. Sociologists, and social scientists more broadly, often are interested in people in these places. Therefore, matching aggregated demographic data with the geographic boundaries is a crucial next step. We can merge a sf object with a data frame containing demographic attributes using the merge() function. # Import demographic attributes sfdem &lt;- read.csv(&quot;data/sfnh_dem.csv&quot;) # Check common identifier names(sfdem) ## [1] &quot;nhood&quot; &quot;pwhite&quot; &quot;pblack&quot; &quot;pasian&quot; &quot;phisp&quot; &quot;pwhite17&quot; &quot;pblack17&quot; ## [8] &quot;pasian17&quot; &quot;phisp17&quot; # Yes, in both data sets, &quot;nhood&quot; exists. # Join attributes to geometry sf_joined &lt;- merge( x = sfnh, # sf object; the returned object will be of the same type as x. y = sfdem, # data frame by.x = &quot;nhood&quot;, # x identifier by.y = &quot;nhood&quot;, # y identifier all.x = TRUE # keep all lines ) # Validate geometries sf_joined &lt;- st_make_valid(sf_joined) Now, we can explore neighborhood-level characteristics. library(tidyverse) # Display the share of white population of neighborhoods sf_joined %&gt;% select(nhood, pwhite) ## Simple feature collection with 41 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.5149 ymin: 37.70813 xmax: -122.357 ymax: 37.8333 ## Geodetic CRS: WGS 84 ## First 10 features: ## nhood pwhite geometry ## 1 Bayview Hunters Point 5.657989 MULTIPOLYGON (((-122.3816 3... ## 2 Bernal Heights 38.517951 MULTIPOLYGON (((-122.4036 3... ## 3 Castro/Upper Market 77.062002 MULTIPOLYGON (((-122.4263 3... ## 4 Chinatown 10.417827 MULTIPOLYGON (((-122.4067 3... ## 5 Excelsior 16.997611 MULTIPOLYGON (((-122.4246 3... ## 6 Financial District/South Beach 60.342295 MULTIPOLYGON (((-122.3875 3... ## 7 Glen Park 60.722712 MULTIPOLYGON (((-122.4474 3... ## 8 Golden Gate Park 66.423358 MULTIPOLYGON (((-122.4426 3... ## 9 Haight Ashbury 74.872127 MULTIPOLYGON (((-122.4321 3... ## 10 Hayes Valley 58.273722 MULTIPOLYGON (((-122.4207 3... # Display the neighborhood named &quot;Mission&quot; sf_joined %&gt;% filter(nhood == &quot;Mission&quot;) ## Simple feature collection with 1 feature and 9 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4269 ymin: 37.74783 xmax: -122.403 ymax: 37.77564 ## Geodetic CRS: WGS 84 ## nhood pwhite pblack pasian phisp pwhite17 pblack17 pasian17 ## 1 Mission 32.5255 2.973325 11.01126 50.07308 41.09069 3.660031 14.46827 ## phisp17 geometry ## 1 35.66786 MULTIPOLYGON (((-122.411 37... # Display the share of white population of &quot;Mission&quot; sf_joined %&gt;% filter(nhood == &quot;Mission&quot;) %&gt;% select(pwhite) ## Simple feature collection with 1 feature and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4269 ymin: 37.74783 xmax: -122.403 ymax: 37.77564 ## Geodetic CRS: WGS 84 ## pwhite geometry ## 1 32.5255 MULTIPOLYGON (((-122.411 37... In maps, we can highlight specific neighborhoods by creating conditions. # Create conditions for highlights sf_joined &lt;- sf_joined %&gt;% mutate( highlight_mission = ifelse(nhood == &quot;Mission&quot;, &quot;Highlighted&quot;, &quot;Other&quot;), # highlight the Mission highlight_white = ifelse(pwhite &gt; 70, &quot;Highlighted&quot;, &quot;Other&quot;) # highlight white neighborhoods ) # Create highlighted maps mission_map &lt;- ggplot(data = sf_joined) + geom_sf(aes(fill = highlight_mission), # specify a variable to fill color = &quot;white&quot;) + scale_fill_manual(values = c(&quot;Highlighted&quot; = &quot;red&quot;, &quot;Other&quot; = &quot;light grey&quot;)) + # specify colors to fill theme_minimal() + theme_void() + theme(legend.position = &quot;none&quot;) # remove legend white_map &lt;- ggplot(data = sf_joined) + geom_sf(aes(fill = highlight_white), color = &quot;white&quot;) + scale_fill_manual(values = c(&quot;Highlighted&quot; = &quot;red&quot;, &quot;Other&quot; = &quot;light grey&quot;)) + theme_minimal() + theme_void() + theme(legend.position = &quot;none&quot;) # Combining maps ggpubr::ggarrange(mission_map, white_map, ncol=2, labels = c(&quot;The Mission&quot;, &quot;White Neighborhoods&quot;) ) # Export your joined sf object as a geojson file st_write(sf_joined, &quot;processed-data/sfnh_dem_joined.geojson&quot;, driver = &quot;GeoJSON&quot;, delete_dsn = TRUE # overwrite the existing file ) ## Deleting source `processed-data/sfnh_dem_joined.geojson&#39; using driver `GeoJSON&#39; ## Writing layer `sfnh_dem_joined&#39; to data source ## `processed-data/sfnh_dem_joined.geojson&#39; using driver `GeoJSON&#39; ## Writing 41 features with 11 fields and geometry type Multi Polygon. THINK AND SHARE Below, you see two maps, each representing Chicago ans Seattle. Source: Hwang (2015).doi: 10.1177/0002716215579823 What are the geographic boundaries used in this figure? What attribute is displayed in the map? Is this attribute quantitative or qualitative? Compare this map to the other map of Chicago below: Source: Bader (2011). doi: 10.1111/j.1540-6040.2011.01368.x Explore Open Data website for City of Paris. Can you find boundaries data? What kind of data do you find interesting? Demographic? Cultural? What potential research questions could you ask? 2.3 Data visualization By joining attributes with spatial boundaries, now we can map demographic patterns. But, first of all, what is a map? A map is a simplified and codified image of geographical space, representing its characteristics and/or its organization. It is the result of a creative action and of the choices made by its author (Lambert and Zanin, 2000; p.4). Source: Lambert and Zanin (2020) Lambert and Zanin (2020) classify maps into two types: Topographic maps are maps that mainly show results of direct observation, such as water courses and human constructions. These maps represent concrete elements that are durably established on a portion of terrestrial space at a given time. Thematic maps are maps on which localizable qualitative or quantitative phenomena of all kinds are represented. Information is represented according to the rules of graphic semiology. These maps are designed, laid out, and “staged” to produce an intelligible image of the geographical phenomenon at hand. We will learn how to create thematic maps. Source: Lambert and Zanin (2020) When it comes to making thematic maps, it is important to consider what type of variable you intend to display (think of your attribute data). We will learn about two different types of maps: Choropleth map for quantitative variables and Typology map for qualitative variables. 2.3.1 Choropleth map A choropleth map is useful for visualizing quantitative variables. This type of map displays color corresponding with an aggregated variable for a given geographic unit, such as population density or per-capital income. EXAMPLE: MEASURING AND MAPPING DIVERSITY In social science research, scholars often use the Herfindahl-Hirschman Index (HHI) as a measure for diversity. It is an economic index, but the formula is also used in ecology (called the Simpson diversity index), as well as in demographic contexts. The formula is: \\[ HHI = \\sum_{i=1}^{N} (MS_i)^2 \\] Where \\(MS_i\\) is the market share of firm \\(i\\) in the market, and \\(N\\) is the number of firms. The lower the HHI, the more competition in the market (many firms with relatively equal market shares). Reversely, the higher the HHI, the less competition in the market, suggesting monopoly. In demographic research, sociologists commonly use the HHI to measure racial diversity of neighborhoods. Instead of market shares of firms in a market, we use the shares of racial groups in a neighborhood. For example, in a neighborhood with 4 racial groups each representing 25%, the HHI would be: \\[ 0.25^2 + 0.25^2 + 0.25^2 + 0.25^2 = 0.25 \\] Compared this to another neighborhood with 2 racial groups – one representing 80% and the other representing 20%. The HHI would be: \\[ 0.80^2 + 0.20^2 = 0.68 \\] The first neighborhood with the HHI of 25% is more diverse compared to the second neighborhood with the HHI of 68%. We can create this diversity measure using the variables we have. # Create the HHI sf_joined &lt;- sf_joined %&gt;% mutate(diversity = (pwhite^2 + pblack^2 + phisp^2 + pasian^2)/100) # Check sf_joined %&gt;% select(diversity) ## Simple feature collection with 41 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.5149 ymin: 37.70813 xmax: -122.357 ymax: 37.8333 ## Geodetic CRS: WGS 84 ## First 10 features: ## diversity geometry ## 1 30.41952 MULTIPOLYGON (((-122.3816 3... ## 2 29.24377 MULTIPOLYGON (((-122.4036 3... ## 3 60.80993 MULTIPOLYGON (((-122.4263 3... ## 4 72.94796 MULTIPOLYGON (((-122.4067 3... ## 5 33.48204 MULTIPOLYGON (((-122.4246 3... ## 6 42.47888 MULTIPOLYGON (((-122.3875 3... ## 7 41.08415 MULTIPOLYGON (((-122.4474 3... ## 8 48.51617 MULTIPOLYGON (((-122.4426 3... ## 9 57.51691 MULTIPOLYGON (((-122.4321 3... ## 10 39.00489 MULTIPOLYGON (((-122.4207 3... To create a choropleth map, we first have to check the statistical distribution of the variable. hist(sf_joined$diversity) There are various methods to determine how you classify colors. The most common methods are quantile binning, natural breaks (jenks), standard deviation, and custom breaks (defined by the researcher). Below, I use the quantile binning and create a map displaying how diverse/homogeneous San Francisco neighborhoods are. # Create a choropleth map visualizing the diversity variable ggplot() + geom_sf(data = sf_joined, # specify the source of spatial data aes(fill = diversity), # add a layer to use &quot;diversity&quot; to fill colors size = 0.2, color = &quot;white&quot;) + scale_fill_distiller(type=&quot;seq&quot;, # fill in sequential colors palette = &quot;Greys&quot;, breaks = quantile(sf_joined$diversity), direction = -1, # 1 for low (light) to high (dark), -1 for reverse ) + theme_void() + labs(fill = &quot;HHI&quot;, # add a label for legend title = &quot;Racial Diversity in San Francisco&quot; # figure title ) What are the least diverse neighborhoods? What are the most diverse neighborhoods? For those who are not familair with San Francisco neighborhoods, we can add labels displaying neighborhood names corresponding to neighborhood boundaries. # Add labels to the map ggplot() + geom_sf(data = sf_joined, aes(fill = diversity), size = 0.2, color = &quot;white&quot;) + scale_fill_distiller(type=&quot;seq&quot;, palette = &quot;Greys&quot;, breaks = quantile(sf_joined$diversity), direction = -1, ) + geom_sf_label(data = sf_joined, aes(label = nhood), # add a layer of labels using the nhood variable size = 1.5, # size of the label text color = &quot;black&quot;, # color of the text fill = &quot;white&quot;, # background fill color label.padding = unit(0.1, &quot;lines&quot;), # padding around the text label.size = 0, # thickness of the border around the label alpha = 0.5, # set transparency of the background check_overlap = TRUE) + # suppress overlapping texts theme_void() + labs(fill = &quot;HHI&quot;, # add a label for legend title = &quot;Racial Diversity in San Francisco&quot; # figure title ) 2.3.2 Typology map A typology map is suitable for qualitative variables that consist distinct and meaningful categories. We will create a gentrification measure to demonstrate a use case for typology map. Gentrification is a phenomenon that we measure over space and time. While there are multiple ways to define and measure gentrification, for the purposes of this tutorial, we will conceptualize gentrification as a neighborhood-level socioeconomic transformation comprised of both an influx of middle-and upper-class residents and an increase in housing prices in previously low-income, urban neighborhoods. Our measure of gentrification is calculated at the census tract level from 2000 to 2020, so that we can examine how the socioeconomic composition of neighborhoods in San Francisco changes over time. The four variables listed below are used in our categorical measure of gentrification: Median household income (in 2020 Dollars) Percent of college-educated residents Median home value (in 2020 Dollars) Median gross rent (in 2020 Dollars) The first step in computing the gentrification measure is determining whether or not a tract is eligible to gentrify (i.e., Gentrifiable). Generally, researchers consider tracts eligible to gentrify if they are relatively low-income neighborhoods such that they could undergo the revitalization that characterizes gentrification. We will operationalize eligibility to gentrify in a binary fashion using the median household income. Not Gentrifiable: Census tracts had a median household income above the city-wide median household income at the start of the period. Gentrifiable: Census tracts had a median household income below the city-wide median household income at the start of the period. Next, among the census tracts that were Gentrifiable, we must determine if they were gentrifying over time or not. To classify the gentrifiable tracts as gentrifying or not gentrifying, we will need to calculate how much socioeconomic change and housing value change the tract experienced over the decade and compare the rate of change to the rate in the city. Gentrifying: Gentrifiable census tracts that had the socioeconomic status of their residents (i.e., % college graduates OR median household income) grow faster than the city wide-median AND the home values (median home value OR median gross rent value) grow faster than the city-wide median over the decade period. Not Gentrifying: Gentrifiable census tracts that did NOT experience growth in the socioeconomic status of their residents AND their home values at a rate higher than the city-wide median values over the decade period. This measurement strategy results in a three-category gentrification measure - Not Gentrifiable, Gentrifying, and Not Gentrifying. With these three categories we can make a typology map of census tracts in San Francisco. # Import demographic attributes for census tracts sftrt_dem &lt;- read.csv(&quot;data/sftrt_dem.csv&quot;) # Explore the data head(sftrt_dem, 5) ## trt10 tpop pyoung pcol minc mhval mrent pwht pblk pasian phisp ## 1 10100 2879 36.99 55.63 76037.34 801814.8 1544.629 57.55 5.52 26.02 7.26 ## 2 10200 4288 36.92 70.51 122888.48 1206373.1 1808.258 83.65 0.72 9.82 3.78 ## 3 10300 4092 30.99 59.79 100281.00 927944.9 1671.979 58.04 0.56 35.04 3.42 ## 4 10400 4859 32.62 61.38 108566.69 1057897.0 1645.376 62.85 0.62 31.34 3.42 ## 5 10500 2217 16.78 68.54 113515.23 791430.7 2258.772 75.33 1.89 17.14 3.20 ## tpop17 pyoung17 pcol17 minc17 mhval17 mrent17 pwht17 pblk17 pasian17 phisp17 ## 1 3889 34.89 52.96 62414 1145800 1770 39.01 6.07 39.44 12.21 ## 2 4167 33.79 85.81 151453 1305300 2471 80.71 2.02 12.07 3.26 ## 3 4359 37.49 72.79 150972 1545800 2206 59.44 0.00 29.04 9.34 ## 4 4536 30.69 74.11 130732 1519800 2220 62.94 0.20 22.57 7.58 ## 5 2779 24.72 78.56 135300 1525000 2270 49.80 9.07 23.68 7.56 ## gentcat ## 1 non-gentrifying ## 2 non-gentrifiable ## 3 non-gentrifiable ## 4 non-gentrifiable ## 5 non-gentrifiable # Explore the geometry head(sftrt, 5) ## Simple feature collection with 5 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4438 ymin: 37.77271 xmax: -122.4234 ymax: 37.7887 ## Geodetic CRS: WGS 84 ## nhood tractce10 geometry ## 1 Hayes Valley 016400 MULTIPOLYGON (((-122.4325 3... ## 2 Western Addition 016100 MULTIPOLYGON (((-122.4235 3... ## 3 Western Addition 015900 MULTIPOLYGON (((-122.4247 3... ## 4 Japantown 015500 MULTIPOLYGON (((-122.4247 3... ## 5 Pacific Heights 015300 MULTIPOLYGON (((-122.4349 3... # Check if it has a common identifier with sftrt head(sftrt_dem$trt10) ## [1] 10100 10200 10300 10400 10500 10600 class(sftrt_dem$trt10) ## [1] &quot;integer&quot; head(sftrt$tractce10) ## [1] &quot;016400&quot; &quot;016100&quot; &quot;015900&quot; &quot;015500&quot; &quot;015300&quot; &quot;015100&quot; class(sftrt$tractce10) ## [1] &quot;character&quot; # Fill with leading zeros and convert to string sftrt_dem &lt;- sftrt_dem %&gt;% mutate(tractce10 = as.character(sprintf(&quot;%06d&quot;, trt10))) # Join demographic data with geometric boundaries sftrt_joined &lt;- merge( x = sftrt, # sf object y = sftrt_dem, # data frame by.x = &quot;tractce10&quot;, # x identifier by.y = &quot;tractce10&quot;, # y identifier all.x = TRUE, # keep all lines ) # Check your variable of interest print(unique(sftrt_joined$gentcat)) ## [1] &quot;non-gentrifying&quot; &quot;non-gentrifiable&quot; &quot;gentrifying&quot; # Create a typology map ggplot(data = sftrt_joined) + geom_sf(aes(fill = gentcat), size = 0.02, color = &quot;white&quot;) + scale_fill_manual(values = c(&quot;non-gentrifiable&quot; = &quot;light grey&quot;, &quot;gentrifying&quot; = &quot;pink&quot;, &quot;non-gentrifying&quot; = &quot;black&quot;)) + # specify colors corresponding to each category theme_void() + labs(fill = &quot;Gentrification Category&quot;, title = &quot;Gentrification in San Francisco&quot; ) CODING EXERCISE Create a qualitative variable with three categories: high-income, middle-income, and low-income. Create a typology map using this variable (“nh-ses”). LEARN MORE For more detailed guidance as to how to choose a discretization method for choropleth map, you can see the slides made by Nicholas Lambert and his colleagues. Steele and her colleagues (2022) published a review article, summerizing existing quantitative approaches to measuring ethnic diversity. HHI (also referred to as ELF) is included as one of the most common measurements. Brown-Saracino (2017) reviews the concept and measurement of gentrification in contemporary literature in a review article. "],["from-people-to-built-environment.html", "Chapter 3 From People to Built Environment 3.1 Transforming Airbnbs 3.2 Geocoding Restaurants 3.3 Distribution and density 3.4 Spatial join 3.5 Export Maps", " Chapter 3 From People to Built Environment So far, we have focused on embedding demographic data into places. However, sociological questions extend beyond just understanding people in places. People don’t simply exist in locations—they interact with the built environment, including schools, local businesses, landmarks, and more. In GIS terms, this type of data is known as point-of-interest (POI) data, which refers to specific points or useful sites identified by geographic coordinates (latitude and longitude). In this tutorial, we will use Airbnb listings and local business data as examples of point-of-interest data. 3.1 Transforming Airbnbs When data contains latitude and longitude coordinates, we can transform it into an sf object by using the st_as_sf command. Here, we’ll use San Francisco Airbnb data to illustrate this process. Unlike neighborhood boundaries, which have polygon geometries, POIs will have point geometries. # Import the Airbnb data sfbnb &lt;- read.csv(&quot;data/sfbnb.csv&quot;) head(sfbnb, 3) ## id trt10 analysis latitude longitude property_type ## 1 958 16700 haight ashbury 37.76931 -122.4339 Apartment ## 2 5858 25300 bernal heights 37.74511 -122.4210 Apartment ## 3 7918 17102 haight ashbury 37.76669 -122.4525 Apartment ## review_scores_rating review_scores_location number_of_reviews ## 1 97 10 176 ## 2 98 10 111 ## 3 85 9 17 # Transform lat/long into sf object sf_sfbnb &lt;- st_as_sf(sfbnb, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326 # specify the projection; WGS84 is a standard projection for global mapping. ) # Check the data head(sf_sfbnb, 3) ## Simple feature collection with 3 features and 7 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -122.4525 ymin: 37.74511 xmax: -122.421 ymax: 37.76931 ## Geodetic CRS: WGS 84 ## id trt10 analysis property_type review_scores_rating ## 1 958 16700 haight ashbury Apartment 97 ## 2 5858 25300 bernal heights Apartment 98 ## 3 7918 17102 haight ashbury Apartment 85 ## review_scores_location number_of_reviews geometry ## 1 10 176 POINT (-122.4339 37.76931) ## 2 10 111 POINT (-122.421 37.74511) ## 3 9 17 POINT (-122.4525 37.76669) You can see that geometry is points, rather than polygons. Each point represents an Airbnb property (id- unique identifier). It also indicates the census tract (trt10) and neighborhood name (analysis) in which the Airbnb property is located. The data also contains attributes of the Airbnb property, such as property type, review score ratings, and the number of reviews. You can save the converted file as geojson using the “st_write” command. # Export the Airbnb data as a geojson file st_write(sf_sfbnb, &quot;processed-data/airbnbs.geojson&quot;, driver = &quot;GeoJSON&quot;, delete_dsn = TRUE) 3.2 Geocoding Restaurants Sometimes, your data may lack latitude and longitude information. Instead, the data may contain street addresses. In such cases, we need to perform geocoding which converts formatted addresses into latitude and longitude coordinates, allowing the data to be displayed as points on a map. Below, we will demonstrate the geocoding process using the restaurant data in San Francisco. # Import restaurant data sfbiz &lt;- read.csv(&quot;data/sfbiz_clean.csv&quot;) # Check if lat and lon exists head(sfbiz, 3) ## company address_line_1 city zipcode ## 1 JOHN&#39;S GRILL 63 ELLIS ST SAN FRANCISCO 94102 ## 2 TAD&#39;S STEAKHOUSE 120 POWELL ST SAN FRANCISCO 94102 ## 3 SAM&#39;S GRILL &amp; SEA FOOD RSTRNT 374 BUSH ST SAN FRANCISCO 94104 ## naics8_descriptions employee_size_location sales_volume_location state ## 1 FULL-SERVICE RESTAURANTS 20 1424 CA ## 2 FULL-SERVICE RESTAURANTS 19 1353 CA ## 3 FULL-SERVICE RESTAURANTS 35 2491 CA In this data, we can see that latitude and longitude coordinates do not exist. However, it contains information on street address, city, state, and zip code. To carry out geocoding, first, we have to create a field that displays a full address. Based on the full address, we can get the coordinates via open street map (osm). Once the data is geocoded, we can transform this data frame to sf object for mapping. # Set up library(tidygeocoder) # Create a full address field (street address, city, state, zipcode) sfbiz &lt;- sfbiz %&gt;% mutate(full_add = paste(address_line_1, city, state, zipcode, sep = &quot;, &quot;)) # Geocode the full address geocoded_sfbiz &lt;- sfbiz %&gt;% sample_n(5) %&gt;% # the full data can take a while, so let&#39;s try on a smaller sample geocode(address = full_add, method = &#39;osm&#39;) # Check the geocoded data geocoded_sfbiz %&gt;% select(lat, long) ## # A tibble: 5 × 2 ## lat long ## &lt;dbl&gt; &lt;dbl&gt; ## 1 37.8 -122. ## 2 37.8 -122. ## 3 37.8 -122. ## 4 37.8 -122. ## 5 37.8 -122. # For the purpose of this tutorial, we can use the prepared, full geocoded data prep_sfbiz &lt;- read.csv(&quot;data/geocoded_sfbiz_clean.csv&quot;) # Transform lat/long data into sf oject sf_sfbiz &lt;- st_as_sf(prep_sfbiz, coords = c(&quot;long&quot;, &quot;lat&quot;), crs = 4326) head(sf_sfbiz, 5) ## Simple feature collection with 5 features and 9 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -122.4078 ymin: 37.78546 xmax: -122.4037 ymax: 37.79137 ## Geodetic CRS: WGS 84 ## company address_line_1 city zipcode ## 1 JOHN&#39;S GRILL 63 ELLIS ST SAN FRANCISCO 94102 ## 2 TAD&#39;S STEAKHOUSE 120 POWELL ST SAN FRANCISCO 94102 ## 3 SAM&#39;S GRILL &amp; SEA FOOD RSTRNT 374 BUSH ST SAN FRANCISCO 94104 ## 4 B44 CATALAN BISTRO 44 BELDEN PL SAN FRANCISCO 94104 ## 5 MIKAKU RESTAURANT 323 GRANT AVE SAN FRANCISCO 94108 ## naics8_descriptions employee_size_location sales_volume_location state ## 1 FULL-SERVICE RESTAURANTS 20 1424 CA ## 2 FULL-SERVICE RESTAURANTS 19 1353 CA ## 3 FULL-SERVICE RESTAURANTS 35 2491 CA ## 4 FULL-SERVICE RESTAURANTS 23 1637 CA ## 5 FULL-SERVICE RESTAURANTS 9 641 CA ## full_add geometry ## 1 63 ELLIS ST, SAN FRANCISCO, CA, 94102 POINT (-122.4072 37.78546) ## 2 120 POWELL ST, SAN FRANCISCO, CA, 94102 POINT (-122.4078 37.78596) ## 3 374 BUSH ST, SAN FRANCISCO, CA, 94104 POINT (-122.4037 37.79095) ## 4 44 BELDEN PL, SAN FRANCISCO, CA, 94104 POINT (-122.4037 37.79137) ## 5 323 GRANT AVE, SAN FRANCISCO, CA, 94108 POINT (-122.4057 37.78999) # Export the restaurant data as a geojson file st_write(sf_sfbiz, &quot;processed-data/restaurants.geojson&quot;, driver = &quot;GeoJSON&quot;, delete_dsn = TRUE) 3.3 Distribution and density Now that we have restaurant locations as points, we can simply overlay the restaurant locations on top of the neighborhood boundaries layer to explore the geographical distribution of restaurants. # Plot the restaurant locations ggplot() + # display neighborhood boundaries as a layer geom_sf(data = sfnh, fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + # add restaurants as another layer geom_sf(data = sf_sfbiz, color = &quot;red&quot;, size = 0.5, alpha = 0.8 # set transparency ) + theme_void() + labs(title = &quot;Restaurants in San Francisco&quot;) SYMBOLOGY BASED ON ATTRIBUTES You can differentiate points based on attributes using symbology (e.g., colors, shapes, sizes). Here, we are only looking at restaurants. But imagine you have a dataset that contains multiple types of retail, such as bars, coffee shops, and restaurants. You might want to map the overall distribution of businesses, but also focus on one specific type of business or highlight differences by business type. In our data, we have “employee size” and “sales volume” of restaurants as attributes. Let’s say you want to focus on small, mom and pop businesses and explore where these small restaurants are concentrated. In the US, businesses with less than 10 or 5 employees are often considered as “small”. Here, we will use 5 as a cutoff to define a small restaurant. You can highlight your data based on this specific attribute. # Create a new column based on employee size sf_sfbiz$small &lt;- ifelse(sf_sfbiz$employee_size_location &lt; 5, &quot;small&quot;, &quot;non-small&quot;) # Plot with ggplot ggplot() + # display neighborhood boundaries as a layer geom_sf(data = sfnh, fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + # add restaurants as another layer geom_sf(data = sf_sfbiz, aes(color = small), # specify the color based on &quot;small&quot; variable size = 0.5, alpha = 0.8 ) + scale_color_manual(values = c(&quot;small&quot; = &quot;red&quot;, &quot;non-small&quot; = &quot;black&quot;), # specify colors labels = c(&quot;less than 5&quot;, &quot;5 or more&quot;)) + # set labels theme_void() + labs(title = &quot;Restaurants by Employee Size in San Francisco&quot;, color = &quot;Employee Size&quot;) # Add more symbology details ggplot() + # display neighborhood boundaries as a layer geom_sf(data = sfnh, fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + # add restaurants as another layer geom_sf(data = sf_sfbiz, aes(color = small, shape = small, size = small), alpha = 0.8) + scale_color_manual(values = c(&quot;small&quot; = &quot;red&quot;, &quot;non-small&quot; = &quot;black&quot;)) + scale_shape_manual(values = c(&quot;small&quot; = 23, &quot;non-small&quot; = 16), labels = c(&quot;less than 5&quot;, &quot;5 or more&quot;)) + scale_size_manual(values = c(&quot;small&quot; = 1.5, &quot;non-small&quot; = 0.5)) + guides(color = &quot;none&quot;, size = &quot;none&quot;, shape = guide_legend(override.aes = list( color = c(&quot;red&quot;, &quot;black&quot;), size = c(1.5, 0.5), shape = c(23, 16) ))) + theme_void() + labs(title = &quot;Restaurants by Employee Size in San Francisco&quot;, shape = &quot;Employee Size&quot;) CODING EXERCISE Create a point map using symbology Use the sales volume variable to create a new category Try using different colors, shapes, and sizes to represent your data From point maps, we can get a general sense of the distribution of restaurants in San Francisco. However, there are two limitations to this visualization. First, it is hard to tell exactly where restaurants are more or less concentrated because points overlap where densely populated. To draw attention to where points are concentrated the most, we can use a density map (also known as a heat map). Among various methods for creating a density map, we will learn how to create a density map using kernel density estimation (KDE). This function is available through the “MASS” package. # Install and set up the &quot;MASS&quot; package library(&quot;MASS&quot;) # Extract coordinates from the sf object coords &lt;- st_coordinates(sf_sfbiz) # Calculate KDE based on coordinates kde &lt;- kde2d(coords[, 1], coords[, 2], n = 500) # n specifies the number of grids # Convert KDE to raster format kde_df &lt;- expand.grid(x = kde$x, y = kde$y) kde_df$z &lt;- as.vector(kde$z) head(kde_df, 5) ## x y z ## 1 -122.5128 37.70935 3.610331e-06 ## 2 -122.5125 37.70935 4.248448e-06 ## 3 -122.5123 37.70935 5.002065e-06 ## 4 -122.5120 37.70935 5.893135e-06 ## 5 -122.5117 37.70935 6.947927e-06 # Plot KDE heat map ggplot() + geom_raster(data = kde_df, aes(x = x, y = y, fill = z), alpha = 1) + # Kernel density heat map geom_sf(data = sfnh, fill = NA, color = &quot;black&quot;) + # Neighborhood boundaries scale_fill_gradientn(colors = c(&quot;transparent&quot;, &quot;lightpink&quot;, &quot;red&quot;, &quot;darkred&quot;), name = &quot;Density&quot;) + theme_void() + labs(title = &quot;Heat Map of Restaurants in San Francisco&quot;) Now, you can clearly see where the restaurants are most concentrated! While heat maps are useful for clearly visualizing concentration of restaurants, the second limitation still remains. With points data, it is difficult to discern spatial patterns of restaurants by neighborhoods because restaurants are both in and outside of neighborhood boundaries. To solve this problem, we will discuss spatial join in the following section, which allows us to spatially link restaurants to neighborhoods, so that we can reduce points data to the level of neighborhoods. 3.4 Spatial join Spatial join allows you to combine two sf objects based on the spatial relationship between their geometries. For example, we can think of the relationship between neighborhoods (polygons) and restaurants (points). Neighborhoods (x) contain restaurants (y), or restaurants (x) are within neighborhoods (y). # Before joining, check if they have the same projections st_crs(sfnh) == st_crs(sf_sfbiz) ## [1] TRUE # Perform spatial join nh_joined &lt;- st_join(x = sfnh, # join y = sf_sfbiz, # target join = st_contains, # does x(polygon) contains y(point)? left = TRUE) # keep all neighborhoods # Explore head(nh_joined, 3) ## Simple feature collection with 3 features and 11 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4428 ymin: 37.77644 xmax: -122.4202 ymax: 37.79037 ## Geodetic CRS: WGS 84 ## nhood company address_line_1 ## 1 Western Addition HINATA SUSHI 810 VAN NESS AVE ## 1.1 Western Addition BURGER KING 819 VAN NESS AVE ## 1.2 Western Addition ISTITUTO ITALIANO DI CULTURA 601 VAN NESS AVE # F ## city zipcode naics8_descriptions employee_size_location ## 1 SAN FRANCISCO 94109 FULL-SERVICE RESTAURANTS 6 ## 1.1 SAN FRANCISCO 94109 FULL-SERVICE RESTAURANTS 58 ## 1.2 SAN FRANCISCO 94102 FULL-SERVICE RESTAURANTS 6 ## sales_volume_location state full_add ## 1 427 CA 810 VAN NESS AVE, SAN FRANCISCO, CA, 94109 ## 1.1 2447 CA 819 VAN NESS AVE, SAN FRANCISCO, CA, 94109 ## 1.2 427 CA 601 VAN NESS AVE # F, SAN FRANCISCO, CA, 94102 ## small geometry ## 1 non-small MULTIPOLYGON (((-122.4214 3... ## 1.1 non-small MULTIPOLYGON (((-122.4214 3... ## 1.2 non-small MULTIPOLYGON (((-122.4214 3... In the joined data, we can see that restaurants (company) are nested within neighborhoods (nhood). We can aggregate this data to the neighborhood level and get the number of restaurants per neighborhood. Some neighborhoods may not any have restaurants, so you want to preserve that as 0 and not count as 1. # Count restaurants per neighborhood restaurant_counts &lt;- nh_joined %&gt;% st_drop_geometry() %&gt;% group_by(nhood) %&gt;% summarise(n_rst = sum(!is.na(company))) # don&#39;t count NA as 1 head(restaurant_counts, 10) ## # A tibble: 10 × 2 ## nhood n_rst ## &lt;chr&gt; &lt;int&gt; ## 1 Bayview Hunters Point 42 ## 2 Bernal Heights 73 ## 3 Castro/Upper Market 86 ## 4 Chinatown 174 ## 5 Excelsior 48 ## 6 Financial District/South Beach 280 ## 7 Glen Park 12 ## 8 Golden Gate Park 2 ## 9 Haight Ashbury 45 ## 10 Hayes Valley 98 MAPPING AGGREGATED RESTAURANT COUNTS As the count of restaurants is a quantitative variable, we can visualize it using the choropleth map. I first join the restaurant counts data with neighborhood boundaries to get the neighborhood-level spatial data. Then, I create a map using custom breaks based on the distribution of the number of restaurants within a neighborhood. # Join the restaurant count to neighborhood boundaries biz_colors &lt;- sfnh %&gt;% left_join(restaurant_counts, by = &quot;nhood&quot;) head(biz_colors, 3) ## Simple feature collection with 3 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4761 ymin: 37.70833 xmax: -122.3983 ymax: 37.79037 ## Geodetic CRS: WGS 84 ## nhood n_rst geometry ## 1 Western Addition 45 MULTIPOLYGON (((-122.4214 3... ## 2 West of Twin Peaks 74 MULTIPOLYGON (((-122.461 37... ## 3 Visitacion Valley 6 MULTIPOLYGON (((-122.4039 3... hist(biz_colors$n_rst) # Create the map using custom breaks ggplot() + geom_sf(data = biz_colors, aes(fill = n_rst), size = 0.2, color = &quot;white&quot;) + scale_fill_distiller(type=&quot;seq&quot;, palette = &quot;Greys&quot;, breaks = c(50, 150, 250), # specify custom breaks direction = 1, ) + theme_void() + labs(fill = &quot;Restaurant Count&quot;, title = &quot;Choropleth Map of Restaurants in San Francisco&quot;) Another way of visualizing a quantitative variable is a proportional symbol map. Proportional symbol maps are particularly useful for absolute quantitative variables (e.g., raw counts, measurements) while choropleth maps are more suitable for relative quantitative variables (e.g., ratios, percentages, proportions). # Create neighborhood centroids nh_cent &lt;- st_centroid(sfnh) # Check centroids print(nh_cent) ## Simple feature collection with 41 features and 1 field ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -122.5014 ymin: 37.71287 xmax: -122.3695 ymax: 37.82065 ## Geodetic CRS: WGS 84 ## First 10 features: ## nhood geometry ## 1 Western Addition POINT (-122.4306 37.78183) ## 2 West of Twin Peaks POINT (-122.4599 37.73518) ## 3 Visitacion Valley POINT (-122.4101 37.71287) ## 4 Twin Peaks POINT (-122.4498 37.75211) ## 5 South of Market POINT (-122.4059 37.77725) ## 6 Treasure Island POINT (-122.3695 37.82065) ## 7 Presidio Heights POINT (-122.4517 37.78631) ## 8 Presidio POINT (-122.4664 37.79738) ## 9 Potrero Hill POINT (-122.3936 37.75887) ## 10 Portola POINT (-122.409 37.72679) # Join the restaurant counts to neighborhood centroids biz_symbols &lt;- nh_cent %&gt;% left_join(restaurant_counts, by = &quot;nhood&quot;) %&gt;% arrange(desc(n_rst)) # sort to ensure small points would be plotted in front of big points head(biz_symbols, 3) ## Simple feature collection with 3 features and 2 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -122.4155 ymin: 37.76013 xmax: -122.3971 ymax: 37.79042 ## Geodetic CRS: WGS 84 ## nhood n_rst geometry ## 1 Mission 329 POINT (-122.4155 37.76013) ## 2 Financial District/South Beach 280 POINT (-122.3971 37.79042) ## 3 Tenderloin 196 POINT (-122.4153 37.78316) # Create the proportional symbol map ggplot() + geom_sf(data = sfnh, # add a base map layer of boundaries fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + geom_sf(data = biz_symbols, aes(size = n_rst), # add a layer of symbols sized based on the restaurant counts shape = 21, # specify a circle shape for symbols fill = &quot;red&quot;, # set a color to fill the shape alpha = 0.6, # set a level of transparency color = &quot;lightgray&quot;) + # set a color for edges of the shape scale_size(range = c(3, 13)) + # set min and max for the size of the symbols theme_void() + labs(size = &quot;Restaurant Count&quot;, title = &quot;Proportional Symbol Map of Restaurants in San Francisco&quot;) A proportional symbol map is also called a clustered point map. In this map, the symbol sizes correspond with the frequency of restaurants - the larger the symbol, the more restaurants that are present in that area. This type of clustering and aggregating visualization technique is particularly helpful when your data only have approximate locations. You can combine two types of aggregated into one visualization by specifying both symbol sizes and colors. # Create the proportional symbol map (size) combined with the choropleth map (fill color) ggplot() + geom_sf(data = sfnh, fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + geom_sf(data = biz_symbols, aes(size = n_rst, fill = n_rst), shape = 21, color = &quot;lightgray&quot;) + scale_size(range = c(3, 10)) + # add colors to the symbols scale_fill_gradientn(colors = hcl.colors(4, # fill the shape with four different colors &quot;RdBu&quot;, # red-blue color scheme rev = TRUE, # reverse the color scheme alpha = 0.9)) + # transparency theme_void() + guides(fill = guide_legend(title = &quot;Restaurant Count&quot;), size = guide_legend(title = &quot;Restaurant Count&quot;)) + # combine legends labs(title = &quot;Choropleth/Proportional Symbol Map of Restaurants in San Francisco&quot;) 3.5 Export Maps Now, let’s say you are ready export your maps for publication. We will publish a figure of four maps combined, displaying various ways of visualizing the distribution of restaurant by neighborhood in San Francisco. # Store and combine maps map1 &lt;- ggplot() + geom_sf(data = sfnh, fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + geom_sf(data = sf_sfbiz, color = &quot;red&quot;, size = 0.5, alpha = 0.8 ) + theme_void() map2 &lt;- ggplot() + geom_raster(data = kde_df, aes(x = x, y = y, fill = z), alpha = 1) + geom_sf(data = sfnh, fill = NA, color = &quot;black&quot;) + scale_fill_gradientn(colors = c(&quot;transparent&quot;, &quot;lightpink&quot;, &quot;red&quot;, &quot;darkred&quot;), name = &quot;Density&quot;) + theme_void() + theme(legend.position = &quot;none&quot;) map3 &lt;- ggplot() + geom_sf(data = biz_colors, aes(fill = n_rst), size = 0.2, color = &quot;white&quot;) + scale_fill_distiller(type=&quot;seq&quot;, palette = &quot;Greys&quot;, breaks = c(50, 150, 250), direction = 1, ) + theme_void() + theme(legend.position = &quot;none&quot;) map4 &lt;- ggplot() + geom_sf(data = sfnh, fill = &quot;lightgray&quot;, size = 0.02, color = &quot;white&quot; ) + geom_sf(data = biz_symbols, aes(size = n_rst), shape = 21, fill = &quot;red&quot;, alpha = 0.6, color = &quot;lightgray&quot;) + scale_size(range = c(3, 13)) + theme_void() + theme(legend.position = &quot;none&quot;) combined &lt;- ggpubr::ggarrange(map1, map2, map3, map4, nrow=2, ncol=2, labels = c(&quot;Point Map&quot;, &quot;Heat Map&quot;, &quot;Choropleth Map&quot;, &quot;PropSymbol Map&quot;)) print(combined) # Export the combined map ggsave(&quot;sf_restaurant_maps.png&quot;, plot = combined, width = 9, height = 9, dpi = 300 # resolution ) THINK AND SHARE Discuss similarities and differences across four different types of maps. What are pros and cons of each type of map? Which visualization do you think is most effective and why? AESTHETIC DETAILS While it is not strictly expected in sociology papers, you can also add a north arrow and a scale bar to a map using the ggspatial package. library(ggspatial) # Adding a scale bar and a north arrow ggplot() + geom_sf(data = biz_colors, aes(fill = n_rst), size = 0.2, color = &quot;white&quot;) + scale_fill_distiller(type = &quot;seq&quot;, palette = &quot;Greys&quot;, breaks = c(50, 150, 250), direction = 1) + theme_void() + labs(fill = &quot;Restaurant Count&quot;, title = &quot;Distribution of Restaurants in San Francisco&quot;) + # add a scale bar annotation_scale(location = &quot;bl&quot;, # &quot;br&quot; is for bottom right, adjust as needed pad_y = unit(0.01, &quot;cm&quot;) # place the scale bar close to the bottom ) + # add a north arrow annotation_north_arrow(location = &quot;tl&quot;, # &quot;tl&quot; is for top left, adjust as needed style = north_arrow_fancy_orienteering) LEARN MORE For visualizing density, hotspot maps also exist though we do not cover in this tutorial. What makes a hotspot map different from a heat map? The short answer is statistics! A heat map provides a smooth, continuous visualization of data across the given area of interest (e.g., neighborhood), similar to histogram. A hotspot map highlights areas that are statistically significant by comparing the distribution of points in the area of interest (e.g., neighborhood) to how they would be distributed in a random manner. For example, a hotspot map of crimes would demonstrate which areas have more or less incidents than we would expect if the “crime generating process” was completely random. The hotspots indicate areas where the frequency of crimes is higher than we would expect if crime was randomly distributed across the neighborhood. Source: ESRI "],["accounting-for-regulations.html", "Chapter 4 Accounting for Regulations 4.1 Spatial relationships", " Chapter 4 Accounting for Regulations So far, we have explored various ways to map the distribution of restaurants in San Francisco. Studies have consistently found that restaurants, and other organizational resources like police stations, schools, childcare centers, banks, and parks, are unevenly distributed across neighborhoods by race and class in the US. Surely, race and class are important determinants of the distribution of resources. For example, white and more affluent neighborhoods have more private childcare centers, traditional financial services, “high-end” restaurants while racial minority and poorer neighborhoods have more public childcare centers, alternative financial services, and “unhealthy” restaurants. We can explore these relationships using the aggregated demographic data merged with the POI data, which we’ve discussed so far. However, the distribution of organizational resources, and more broadly, the built environment is heavily shaped by regulations. Particularly, local zoning laws have tremendous impact on what gets or doesn’t get built in the neighborhood. In the following, we will discuss how “community benefit districts (CBDs)”, also known as “business improvement districts (BIDs), may have a spatial relationship with the distribution of restaurants in San Francisco. In San Francisco, CBDs are designated based on a private-public partnership to fund improvements and get customized support for commercial and mixed-use corridors in select neighborhoods. # Import the cbds data sfzone &lt;- st_read(&quot;data/bid-cbd.geojson&quot;) %&gt;% dplyr::select(community_benefit_district, contract_duration, established, geometry) ## Reading layer `bid-cbd&#39; from data source ## `/Users/hesuyoon/Documents/ENSAE-CREST/2024/2 Fall/Teaching/Advanced_Method/soc-gis-tutorial/data/bid-cbd.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 16 features and 12 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4653 ymin: 37.71984 xmax: -122.3881 ymax: 37.80862 ## Geodetic CRS: WGS 84 head(sfzone, 3) ## Simple feature collection with 3 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4653 ymin: 37.71984 xmax: -122.3997 ymax: 37.78026 ## Geodetic CRS: WGS 84 ## community_benefit_district contract_duration established ## 1 SoMa West 15 years 2019 ## 2 Excelsior 10 years 2023 ## 3 Ocean Avenue 15 years 2010 ## geometry ## 1 MULTIPOLYGON (((-122.4178 3... ## 2 MULTIPOLYGON (((-122.4385 3... ## 3 MULTIPOLYGON (((-122.4653 3... # Check the boundaries ggplot() + geom_sf(data = sfnh, fill = NA, color = &quot;black&quot;, size = 0.2) + geom_sf(data = sfzone, aes(fill = community_benefit_district), color = &quot;white&quot;, size = 0.02) + theme_void() + labs(title = &quot;Community Benefit Districts in San Francisco&quot;) Recollect how restaurants were distributed in San Francisco. We can, for instance, ask if a neighborhood is within or close to BIDs, they are likely to have more businesses. If this was the case, such a spatial proximity could be an important factor in estimating the relationship between a neighborhood and the number of businesses. Below, we will how to create a spatial variable at the neighborhood-level, indicating 1) whether the neighborhood intersects with BIDs (binary), as well as 2) its nearest or average distance to BIDs (continuous). 4.1 Spatial relationships First, let’s determine whether a neighborhood boundary intersects with BIDs. We can use st_intersects function to create a list of neighborhoods and its intersecting BIDs. # Find out if neighborhoods intersect with any BIDs intersections &lt;- st_intersects(biz_colors, sfzone) print(intersections) ## Sparse geometry binary predicate list of length 41, where the predicate ## was `intersects&#39; ## first 10 elements: ## 1: 12, 13, 15 ## 2: 3 ## 3: (empty) ## 4: (empty) ## 5: 1, 6, 9, 11, 13, 14 ## 6: (empty) ## 7: (empty) ## 8: (empty) ## 9: (empty) ## 10: (empty) # Create a new binary variable indicating whether a neighborhood intersects with any BIDs biz_colors$intersects_cbd &lt;- sapply(intersections, function(x) ifelse(length(x) &gt; 0, 1, 0)) head(biz_colors, 3) ## Simple feature collection with 3 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4761 ymin: 37.70833 xmax: -122.3983 ymax: 37.79037 ## Geodetic CRS: WGS 84 ## nhood n_rst geometry intersects_cbd ## 1 Western Addition 45 MULTIPOLYGON (((-122.4214 3... 1 ## 2 West of Twin Peaks 74 MULTIPOLYGON (((-122.461 37... 1 ## 3 Visitacion Valley 6 MULTIPOLYGON (((-122.4039 3... 0 Here, we can see that a new “intersects_cbd” column was created and added to the sf object, biz_colors. With this neighborhood-level data, you could run a bivariate regression model estimating the relationship between the number of businesses and being in BIDs. # Assuming you have the number of businesses in a column `num_businesses` model &lt;- lm(n_rst ~ intersects_cbd, data = biz_colors) # View the summary of the model summary(model) ## ## Call: ## lm(formula = n_rst ~ intersects_cbd, data = biz_colors) ## ## Residuals: ## Min 1Q Median 3Q Max ## -87.32 -39.77 -19.32 30.23 223.68 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 39.77 14.41 2.761 0.00874 ** ## intersects_cbd 65.54 21.16 3.097 0.00361 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 67.57 on 39 degrees of freedom ## Multiple R-squared: 0.1974, Adjusted R-squared: 0.1768 ## F-statistic: 9.594 on 1 and 39 DF, p-value: 0.00361 This simple analysis demonstrates that neighborhoods that intersect BIDs, on average, indeed have 65.54 more businesses compared to neighborhoods that do not intersect with BIDs. Such a spatial variable can be included as a main predictor or as a control variable depending on your research question. The second solution requires calculating distance. What is the nearest or average distance to BIDs for a given neighborhood? We use the centroids of polygons for distance calculations. # Create centroids for both neighborhood polygons and community benefit district polygons nh_centroids &lt;- st_centroid(sfnh) bids_centroids &lt;- st_centroid(sfzone) # Compute pairwise distances (matrix form) distances &lt;- st_distance(nh_centroids, bids_centroids) # Convert to a data frame for easier manipulation distance_df &lt;- as.data.frame(as.matrix(distances)) head(distance_df, 3) ## V1 V2 V3 V4 V5 V6 ## 1 2113.160 [m] 6330.618 [m] 6579.378 [m] 3389.777 [m] 1824.279 [m] 2582.332 [m] ## 2 6240.084 [m] 2536.732 [m] 1253.155 [m] 3041.710 [m] 4212.930 [m] 7469.365 [m] ## 3 6801.452 [m] 2506.258 [m] 4016.806 [m] 4695.895 [m] 6128.807 [m] 7928.812 [m] ## V7 V8 V9 V10 V11 ## 1 3287.795 [m] 2949.494 [m] 2134.726 [m] 3076.620 [m] 1737.384 [m] ## 2 8281.413 [m] 8283.973 [m] 7432.754 [m] 8868.106 [m] 6514.740 [m] ## 3 8527.637 [m] 8917.746 [m] 8312.261 [m] 10461.030 [m] 7383.877 [m] ## V12 V13 V14 V15 V16 ## 1 414.8295 [m] 1096.984 [m] 1442.067 [m] 1130.678 [m] 1497.141 [m] ## 2 6181.4583 [m] 5951.285 [m] 6710.372 [m] 6815.890 [m] 7285.227 [m] ## 3 8271.5464 [m] 7276.509 [m] 7873.987 [m] 8384.073 [m] 9011.337 [m] # Add meaningful column and row names colnames(distance_df) &lt;- sfzone$community_benefit_district rownames(distance_df) &lt;- sfnh$nhood head(distance_df, 3) ## SoMa West Excelsior Ocean Avenue ## Western Addition 2113.160 [m] 6330.618 [m] 6579.378 [m] ## West of Twin Peaks 6240.084 [m] 2536.732 [m] 1253.155 [m] ## Visitacion Valley 6801.452 [m] 2506.258 [m] 4016.806 [m] ## Noe Valley Association Castro/Upper Market Yerba Buena ## Western Addition 3389.777 [m] 1824.279 [m] 2582.332 [m] ## West of Twin Peaks 3041.710 [m] 4212.930 [m] 7469.365 [m] ## Visitacion Valley 4695.895 [m] 6128.807 [m] 7928.812 [m] ## East Cut (Greater Rincon Hill) Downtown ## Western Addition 3287.795 [m] 2949.494 [m] ## West of Twin Peaks 8281.413 [m] 8283.973 [m] ## Visitacion Valley 8527.637 [m] 8917.746 [m] ## Union Square Business Improvement District Fisherman&#39;s Wharf ## Western Addition 2134.726 [m] 3076.620 [m] ## West of Twin Peaks 7432.754 [m] 8868.106 [m] ## Visitacion Valley 8312.261 [m] 10461.030 [m] ## Mid Market Japantown Civic Center Tenderloin ## Western Addition 1737.384 [m] 414.8295 [m] 1096.984 [m] 1442.067 [m] ## West of Twin Peaks 6514.740 [m] 6181.4583 [m] 5951.285 [m] 6710.372 [m] ## Visitacion Valley 7383.877 [m] 8271.5464 [m] 7276.509 [m] 7873.987 [m] ## Lower Polk Discover Polk ## Western Addition 1130.678 [m] 1497.141 [m] ## West of Twin Peaks 6815.890 [m] 7285.227 [m] ## Visitacion Valley 8384.073 [m] 9011.337 [m] # Reshape to a long-format for analysis distance_long &lt;- distance_df %&gt;% rownames_to_column(&quot;Neighborhood&quot;) %&gt;% pivot_longer( cols = -Neighborhood, names_to = &quot;BID&quot;, values_to = &quot;Distance&quot; ) head(distance_long, 10) ## # A tibble: 10 × 3 ## Neighborhood BID Distance ## &lt;chr&gt; &lt;chr&gt; [m] ## 1 Western Addition SoMa West 2113. ## 2 Western Addition Excelsior 6331. ## 3 Western Addition Ocean Avenue 6579. ## 4 Western Addition Noe Valley Association 3390. ## 5 Western Addition Castro/Upper Market 1824. ## 6 Western Addition Yerba Buena 2582. ## 7 Western Addition East Cut (Greater Rincon Hill) 3288. ## 8 Western Addition Downtown 2949. ## 9 Western Addition Union Square Business Improvement District 2135. ## 10 Western Addition Fisherman&#39;s Wharf 3077. # Identify nearest distance nearest_bid &lt;- distance_long %&gt;% group_by(Neighborhood) %&gt;% slice_min(order_by = Distance) head(nearest_bid, 10) ## # A tibble: 10 × 3 ## # Groups: Neighborhood [10] ## Neighborhood BID Distance ## &lt;chr&gt; &lt;chr&gt; [m] ## 1 Bayview Hunters Point Excelsior 4284. ## 2 Bernal Heights Noe Valley Association 1890. ## 3 Castro/Upper Market Castro/Upper Market 502. ## 4 Chinatown Downtown 733. ## 5 Excelsior Excelsior 741. ## 6 Financial District/South Beach East Cut (Greater Rincon Hill) 329. ## 7 Glen Park Noe Valley Association 1361. ## 8 Golden Gate Park Castro/Upper Market 4487. ## 9 Haight Ashbury Castro/Upper Market 1221. ## 10 Hayes Valley Civic Center 934. This type of distance data can be used for network analysis to study urban connectivity, accessibility, and so forth. In network terms, a Neighborhood is ego, and a BID is alter. Distance is edge, connecting ego and alter. Network analysis is beyond the scope of this tutorial, but remember, handling spatial data is a powerful tool that will enable you to conduct advanced statistical analysis. We can simply add the nearest distance to the existing neighborhood-level data using the following function. # Calculate the minimum distance for each neighborhood biz_colors$min_distance_to_bid &lt;- apply(distances, 1, min) # &#39;mean&#39; for average distance head(biz_colors, 3) ## Simple feature collection with 3 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -122.4761 ymin: 37.70833 xmax: -122.3983 ymax: 37.79037 ## Geodetic CRS: WGS 84 ## nhood n_rst geometry intersects_cbd ## 1 Western Addition 45 MULTIPOLYGON (((-122.4214 3... 1 ## 2 West of Twin Peaks 74 MULTIPOLYGON (((-122.461 37... 1 ## 3 Visitacion Valley 6 MULTIPOLYGON (((-122.4039 3... 0 ## min_distance_to_bid ## 1 414.8295 ## 2 1253.1553 ## 3 2506.2580 Now, you have a neighborhood-level data with the number of restaurants (n_rst) as an outcome variable, and two spatial predictors - intersects_cbd and min_distance_to_bid. You can always merge additional predictors, such as aggregated demographic variables, which we covered in the beginning of the tutorial. THINK AND SHARE What other regulations, including but not limited to zoning, can you think of that have meaningful impact on spatial organization of people and the built environment? For example, scholars have examined the relationship between historic districts and gentrification (McCabe and Ellen, 2016) and the impact of BIDs on property values (Ellen et al, 2007). What are their research questions? How did these authors build and analyze their data? What are the key findings? LINES Remember three different forms of vector data? We have discussed polygons, points.. and what’s left? Lines. Lines are useful when you are interested in exploring and visualizing transportation networks, mobility patterns, connectivity, and so forth. We won’t cover much details about the line formatted data, but will provide a short example of mapping lines. During COVID, San Francisco city government launched the Slow Street Program to help maintain social distance requirements for users on the streets. Slow Streets utilize temporary tools like cones and signage to divert traffic and remind vehicles to maintain a safe speed to accommodate for pedestrians and bicyclists who may be traveling to make essential trips. After COVID, this program continued as part of a connected, citywide Active Transportation Network, designed to eliminate deaths and severe injuries related to transportation, and encourage more people to choose low-carbon ways to travel for their daily trips. # Import slow street data (lines) slowst &lt;- st_read(&quot;data/slow-st.geojson&quot;) ## Reading layer `slow-st&#39; from data source ## `/Users/hesuyoon/Documents/ENSAE-CREST/2024/2 Fall/Teaching/Advanced_Method/soc-gis-tutorial/data/slow-st.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 240 features and 22 fields ## Geometry type: LINESTRING ## Dimension: XY ## Bounding box: xmin: -122.5056 ymin: 37.71392 xmax: -122.3902 ymax: 37.7905 ## Geodetic CRS: WGS 84 ggplot() + geom_sf(data = sfnh, fill = &quot;lightgrey&quot;, color = &quot;white&quot;, size = 0.2) + geom_sf(data = slowst, color = &quot;blue&quot;, size = 50, linetype = &quot;solid&quot;) + # options: dashed, dotted, etc theme_void() Source: SFMTA (Accessed 2024) THINK AND SHARE What kind of research questions can you ask about BIDs? What kind of research questions can you ask about slow streets? Discuss the potential predictors (x) or outcomes (y). "],["additional-topics.html", "Chapter 5 Additional Topics", " Chapter 5 Additional Topics Beyond the materials covered in this tutorial, the use case of spatial data and mapping is numerous and by no means limited to topics like demographics, urban economy, and regulations. Sociologists leverage spatial data to study a variety of topics, especially with the expansion of open access GIS data sources. Some topics include but are not limited to: Crime patterns Voting behaviors Environmental and climate issues Moreover, digital trace data with geotags are also emerging sources of spatial data, enabling researchers to study texts and images associated with particular geographies. Think about all the reviews on Google Maps, images with location information on Instagram, and geotagged posts on X (ex-Twitter). It is fascinating to think about how the new technologies mediate the ways in which people imagine and experience places. With all the tools you learned from this class, you will now be able to start tackling some of these questions yourself! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
